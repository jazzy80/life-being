<?php

namespace Utils;

class Utils {

	/**
	 * Group element of the input array by key, generated by the key_func invoked for each element.
	 *
	 * @param array $arr
	 *  The input array to be grouped by a key.
	 * @param callable $key_func
	 *  The callable that is invoked for each element in the array, which generates the key to group by.
	 *
	 * @return array:
	 *  An associative array where the elements are grouped by key, and the values are flat arrays representing the groups.
	 */
	public static function group_by( array $arr, callable $key_func ): array {
		$new = [];
		foreach ( $arr as $item ) {
			$group_by_key = $key_func( $item );
			#  If a key already exists add the item to the underlying array.
			if ( key_exists( $group_by_key, $new ) ) {
				$new[ $group_by_key ][] = $item;
				# A key does not already exist, create a new array with the item as the first element.
			} else {
				$new[ $group_by_key ] = [ $item ];
			}
		}

		return $new;
	}

	public static function array_distinct_by( array $arr, callable $key_func ): array {
		$new = [];
		foreach ( $arr as $item ) {
			$distinct_by = $key_func( $item );
			if ( !key_exists( $distinct_by, $new ) ) {
				$new[ $distinct_by ] = $item;
			}
		}
		return array_values( $new );
	}

	/**
	 * Transform each element using $fn, and flatten the nested arrays into one flat array.
	 *
	 * @param callable $fn
	 *  Function that maps an element A to an array of Bs.
	 * @param array $array
	 *  The input array that is used to transform.
	 *
	 * @return array
	 *  The newly created array.
	 */
	public static function array_flat_map( callable $fn, array $array ): array {
		$result = [];
		#  Invoking fn on each element creates an array of arrays.
		$xss = array_map( $fn, $array );
		#  iterate each nested array and flatted.
		foreach ( $xss as $xs ) {
			$result[] = $xs;
		}

		return $result;
	}

	/**
	 * @param string|int $key
	 * @param array $array
	 *
	 * @return mixed
	 */
	public static function array_safe_get( string|int $key, array $array ): mixed {
		if ( ! key_exists( $key, $array ) ) {
			return null;
		}

		return $array[ $key ];
	}

	/**
	 * @param array $arr
	 *
	 * @return mixed
	 */
	public static function array_safe_head( array $arr ): mixed {
		if ( count( $arr ) === 0 ) {
			return null;
		}

		return $arr[0];
	}

	/**
	 * @param array $arr
	 *
	 * @return array
	 */
	public static function array_safe_tail( array $arr ): array {
		if ( count( $arr ) === 0 ) {
			return [];
		}

		return array_slice( $arr, 1 );
	}

	/**
	 * @param array $array <A>
	 * @param callable $predicate <A => bool>
	 *
	 * @return mixed <A | null>
	 *     return the first element for which the predicate is true null if no element is found.
	 */
	public static function find_if( array $array, callable $predicate ) {
		foreach ( $array as $element ) {
			if ( $predicate( $element ) ) {
				return $element;
			}
		}

		return null;
	}
}
